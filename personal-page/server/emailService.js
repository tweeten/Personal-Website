const nodemailer = require('nodemailer');

// Create transporter
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.EMAIL_HOST || 'smtp.gmail.com',
    port: process.env.EMAIL_PORT || 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });
};

// Format contact message for email
const formatContactMessage = (entry) => {
  const date = new Date(entry.created_at).toLocaleString();
  
  return `
New Contact Form Submission

Name: ${entry.name}
Email: ${entry.email}
Message: ${entry.message}
Submitted: ${date}

---
This message was automatically generated by your personal website contact form processor.
  `.trim();
};

// Send email notification for new contact entries
const sendContactNotification = async (entries) => {
  if (!entries || entries.length === 0) {
    console.log('No new entries to notify about');
    return;
  }

  try {
    const transporter = createTransporter();
    
    // Create email content
    const subject = `New Contact Form ${entries.length === 1 ? 'Submission' : 'Submissions'} - ${new Date().toLocaleDateString()}`;
    
    let emailBody = `You have ${entries.length} new contact form submission${entries.length === 1 ? '' : 's'}:\n\n`;
    
    entries.forEach((entry, index) => {
      emailBody += `--- Entry ${index + 1} ---\n`;
      emailBody += formatContactMessage(entry);
      emailBody += '\n\n';
    });

    // Send email
    const info = await transporter.sendMail({
      from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
      to: process.env.EMAIL_TO,
      subject: subject,
      text: emailBody,
      html: emailBody.replace(/\n/g, '<br>'),
    });

    console.log('Email notification sent successfully:', info.messageId);
    return info;
  } catch (error) {
    console.error('Failed to send email notification:', error);
    throw error;
  }
};

// Test email configuration
const testEmailConfig = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('Email configuration is valid');
    return true;
  } catch (error) {
    console.error('Email configuration error:', error);
    return false;
  }
};

module.exports = {
  sendContactNotification,
  testEmailConfig,
  formatContactMessage,
};
